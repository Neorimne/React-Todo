{"version":3,"sources":["components/Header/header.module.css","components/Footer/footer.module.css","redux/usersReducer.js","redux/postsReducer.js","components/Header/Header.js","redux/todoReducer.js","components/Todos/TodoItem.js","components/Todos/Todos.js","components/Todos/TodosContainer.js","redux/store.js","components/Footer/Footer.js","App.js","serviceWorker.js","index.js","components/Todos/todos.module.css"],"names":["module","exports","initState","usersData","usersImages","setUsersData","type","setUsersImages","usersReducer","state","action","posts","setPosts","postsReducer","Header","props","className","style","navWrapper","nav","navItems","to","tasksData","taskNewText","todoReducer","task","id","Date","now","taskText","isCompleted","map","element","elementId","filter","TodoItem","key","todoItem","backgroundColor","onClick","toggleEventHandler","itemButton","removeButton","removeTask","Todos","newTaskElement","React","createRef","useState","showState","setShowState","todoArr","setTodoArr","useEffect","tasksCompleted","tasksInProgress","toggleIsNotCompleted","toggleIsCompleted","toDoItems","todosWrapper","formWrapper","onSubmit","event","preventDefault","form","htmlFor","onChange","current","value","updateNewTaskText","ref","addTask","buttonsWrapper","removeAllTasks","todosItemsWrapper","TodosContainer","connect","todos","reducers","combineReducers","users","store","createStore","Footer","footerWrapper","aboutUsBlock","socialLinks","href","src","alt","width","UsersContainer","lazy","PostsContainer","Contacts","App","console","log","process","basename","PUBLIC_UR","exact","path","render","fallback","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a907113e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"header_nav__2TvTt\",\"navWrapper\":\"header_navWrapper__PqOUR\",\"navItems\":\"header_navItems__36qnq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"footerWrapper\":\"footer_footerWrapper__2xgTf\",\"aboutUsBlock\":\"footer_aboutUsBlock__228ni\",\"socialLinks\":\"footer_socialLinks__3BDoG\"};","const SET_USERS_IMAGES = 'SET_USERS_IMAGES';\r\nconst SET_USERS_DATA = 'SET_USERS_DATA';\r\n\r\nlet initState = {\r\n    usersData: [],\r\n    usersImages: []\r\n};\r\n\r\nconst usersReducer = (state = initState, action) => {\r\n    switch(action.type){\r\n        case SET_USERS_DATA:{\r\n            return {\r\n                ...state,\r\n                usersData : [...action.usersData] \r\n            }\r\n        };\r\n        case SET_USERS_IMAGES:{\r\n            return{\r\n                ...state,\r\n                usersImages: [...action.usersImages]\r\n            }\r\n        }\r\n        default: {\r\n            return state;\r\n        }\r\n    };\r\n};\r\n\r\nexport const setUsersData = (usersData) => ({type: SET_USERS_DATA, usersData});\r\nexport const setUsersImages = (usersImages) => ({type: SET_USERS_IMAGES, usersImages})\r\n\r\nexport default usersReducer;\r\n","const SET_POSTS = 'SET_POSTS';\r\n\r\nlet initState = {\r\n    posts: []\r\n};\r\n\r\nconst postsReducer = (state = initState, action) => {\r\n    switch(action.type){\r\n        case SET_POSTS:{\r\n            return{\r\n                ...state,\r\n                posts: action.posts\r\n            }\r\n        };\r\n        default:\r\n            return state\r\n    }\r\n};\r\n\r\nexport const setPosts = (posts) => ({type: SET_POSTS, posts})\r\n\r\nexport default postsReducer;\r\n","import React from 'react'\r\nimport { NavLink } from 'react-router-dom';\r\nimport style from './header.module.css';\r\n\r\nconst Header = (props) => {\r\n    return (\r\n        <div className={style.navWrapper}>\r\n            <div className={style.nav}>\r\n                <NavLink className={style.navItems} to=\"/\">TODOS</NavLink>\r\n                <NavLink className={style.navItems} to=\"/users\">USERS</NavLink>\r\n                <NavLink className={style.navItems} to=\"/posts\">POSTS</NavLink>\r\n                <NavLink className={style.navItems} to=\"/contacts\">CONTACTS</NavLink>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header;","const UPDATE_TASK_TEXT = 'UPDATE_TASK_TEXT';\r\nconst ADD_TASK = 'ADD_TASK';\r\nconst TOGGLE_IS_COMPLETED = 'TOGGLE_IS_COMPLETED';\r\nconst TOGGLE_IS_NOT_COMPLETED = 'TOGGLE_IS_NOT_COMPLETED';\r\nconst REMOVE_TASK = 'REMOVE_TASK';\r\nconst REMOVE_ALL_TASKS = 'REMOVE_ALL_TASKS';\r\n\r\nlet initState = {\r\n    tasksData: [],\r\n    taskNewText: '',\r\n};\r\n\r\nconst todoReducer = (state = initState, action) => {\r\n    switch(action.type) {\r\n        case UPDATE_TASK_TEXT: {\r\n            return {\r\n                ...state,\r\n                taskNewText: action.taskNewText\r\n            }\r\n        };\r\n        case ADD_TASK: {\r\n            if (state.taskNewText === '') return state\r\n            let task = {\r\n                id : Date.now(),\r\n                taskText: state.taskNewText,\r\n                isCompleted: false\r\n            }\r\n            return {\r\n                ...state,\r\n                tasksData: [...state.tasksData, task],\r\n                taskNewText: ''\r\n            }\r\n        };\r\n        case TOGGLE_IS_COMPLETED: {\r\n            return {\r\n                ...state,\r\n                tasksData: state.tasksData.map(element => {\r\n                    if (element.id === action.elementId){\r\n                        return {...element, isCompleted: true}\r\n                    }\r\n                    return element;\r\n                })\r\n            };\r\n        };\r\n        case TOGGLE_IS_NOT_COMPLETED: {\r\n            return {\r\n                ...state,\r\n                tasksData: state.tasksData.map(element => {\r\n                    if (element.id === action.elementId){\r\n                        return {...element, isCompleted: false}\r\n                    }\r\n                    return element;\r\n                })\r\n            };\r\n        }\r\n        case REMOVE_TASK: {\r\n            return {\r\n                ...state,\r\n                tasksData: state.tasksData.filter(element => element.id !== action.elementId)  \r\n                }\r\n        };\r\n        case REMOVE_ALL_TASKS: {\r\n            return {\r\n                tasksData: [],\r\n                taskNewText: ''\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const updateNewTaskText = (taskNewText) => ({type: UPDATE_TASK_TEXT, taskNewText});\r\nexport const addTask = () => ({type: ADD_TASK});\r\nexport const toggleIsCompleted = (elementId) => ({type: TOGGLE_IS_COMPLETED, elementId });\r\nexport const toggleIsNotCompleted = (elementId) => ({type: TOGGLE_IS_NOT_COMPLETED, elementId});\r\nexport const removeTask = (elementId) => ({type: REMOVE_TASK, elementId});\r\nexport const removeAllTasks = () => ({type: REMOVE_ALL_TASKS})\r\n\r\n\r\nexport default todoReducer;","import React from 'react';\r\nimport style from './todos.module.css';\r\n\r\nconst TodoItem = (props) => {\r\n    return (\r\n            <div key={props.element.id} \r\n            className={style.todoItem}\r\n            style={props.element.isCompleted ? {backgroundColor: \"rgba(80, 209, 245, 0.452)\"} :{ backgroundColor: \"rgba(196, 49, 13, 0.692)\"}}\r\n            onClick={() => {props.toggleEventHandler(props.element.isCompleted, props.element.id)}}>\r\n                {\r\n                    props.element.isCompleted\r\n                    ? <div className={style.itemButton} >\r\n                        <button \r\n                                onClick={ \r\n                                    () => {props.toggleEventHandler(props.element.isCompleted, props.element.id)}\r\n                                    }>COMPLETED\r\n                        </button>\r\n                    </div>\r\n                    : <div className={style.itemButton} >\r\n                        <button \r\n                                onClick={ \r\n                                    () => {props.toggleEventHandler(props.element.isCompleted, props.element.id)}\r\n                                    }>IN PROGRESS\r\n                        </button>\r\n                    </div>\r\n                }\r\n               <div className={style.itemButton}>\r\n                    <button className={style.removeButton} \r\n                        onClick={ () => {props.removeTask(props.element.id)}}>\r\n                        REMOVE</button>\r\n               </div>\r\n               <div className={style.taskText}>{props.element.taskText}</div> \r\n            </div> \r\n    )\r\n};\r\n\r\nexport default TodoItem;","import React, {useState, useEffect} from 'react';\r\nimport style from './todos.module.css';\r\nimport TodoItem from './TodoItem';\r\nconst DEFAULT = 'default';\r\nconst SHOW_COMPLETED = 'SHOW_COMPLETED';\r\nconst SHOW_IN_PROGRESS = 'SHOW_IN_PROGRESS';\r\n\r\n\r\nconst Todos = (props) => {\r\n    \r\n    const newTaskElement = React.createRef();\r\n    const [showState, setShowState] = useState(DEFAULT);\r\n    const [todoArr, setTodoArr] = useState(props.tasksData);\r\n\r\n    useEffect(() => {\r\n        setTodoArr(props.tasksData); \r\n    },[props.tasksData]);\r\n\r\n    useEffect(() =>{\r\n        switch(showState){\r\n            case DEFAULT: {\r\n               setTodoArr(props.tasksData)\r\n               break;\r\n            };\r\n            case SHOW_COMPLETED: {\r\n               setTodoArr(props.tasksCompleted)\r\n               break;\r\n            };\r\n            case SHOW_IN_PROGRESS: {\r\n               setTodoArr(props.tasksInProgress)\r\n               break; \r\n            }\r\n        }\r\n    }, [showState])\r\n\r\n    const showAll = () => {\r\n        setShowState(DEFAULT)\r\n    };\r\n    \r\n    const showCompleted = () => {\r\n        setShowState(SHOW_COMPLETED)\r\n    };\r\n\r\n    const showInProgress = () => {\r\n        setShowState(SHOW_IN_PROGRESS);\r\n    };\r\n\r\n    const removeAll = () => {\r\n        props.removeAllTasks();\r\n    }\r\n\r\n    const addTask = () => {\r\n        setTodoArr([...props.tasksData]);\r\n        props.addTask();    \r\n    };\r\n\r\n    const onTextChange = () => {\r\n        let taskNewText = newTaskElement.current.value;\r\n        props.updateNewTaskText(taskNewText);\r\n    };\r\n\r\n    const toggleEventHandler = (isCompleted, id) => {\r\n        if (!isCompleted) props.toggleIsCompleted(id);\r\n        else props.toggleIsNotCompleted(id)\r\n    };\r\n     let toDoItems = todoArr\r\n        .map((element) => <TodoItem element={element} \r\n                            removeTask={props.removeTask} \r\n                            toggleEventHandler={toggleEventHandler}\r\n                            key={element.id} />);\r\n    \r\n    return (\r\n        <div className={style.todosWrapper}>\r\n            <div className={style.formWrapper}>\r\n                <form onSubmit={(event) => event.preventDefault()} className={style.form}>\r\n                    <label htmlFor=\"newTask\">\r\n                        NEW TASK\r\n                </label>\r\n                    <input id=\"newTask\"\r\n                        onChange={onTextChange}\r\n                        value={props.taskNewText}\r\n                        ref={newTaskElement}\r\n                        type=\"text\"\r\n                    />\r\n                    <button type=\"submit\" onClick={addTask}>SUBMIT</button>\r\n                </form>\r\n            </div>\r\n            <div className={style.buttonsWrapper}>\r\n               <button onClick={showAll}>Show ALL</button>\r\n               <button onClick={showCompleted}>Show Completed</button>\r\n               <button onClick={showInProgress}>Show in Progress</button>\r\n               <button onClick={removeAll}>Remove all</button>\r\n            </div>\r\n            <div className={style.todosItemsWrapper}>\r\n               {toDoItems}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Todos;","\r\nimport {connect } from 'react-redux';\r\nimport  { updateNewTaskText, addTask, toggleIsCompleted, toggleIsNotCompleted, removeTask, removeAllTasks } from '../../redux/todoReducer';\r\nimport Todos from './Todos';\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        tasksData: state.todos.tasksData,\r\n        taskNewText: state.todos.taskNewText,\r\n        tasksCompleted: state.todos.tasksData.filter(element => element.isCompleted),\r\n        tasksInProgress: state.todos.tasksData.filter(element => !element.isCompleted)\r\n    }\r\n};\r\n\r\nconst  TodosContainer = connect(mapStateToProps, {\r\n    updateNewTaskText,\r\n    addTask,\r\n    toggleIsCompleted,\r\n    toggleIsNotCompleted,\r\n    removeTask,\r\n    removeAllTasks\r\n})(Todos);\r\n\r\nexport default TodosContainer;\r\n\r\n\r\n","import {combineReducers, createStore} from 'redux';\r\nimport todoReducer from './todoReducer';\r\nimport usersReducer from './usersReducer';\r\nimport postsReducer from './postsReducer';\r\n\r\n\r\n\r\nlet reducers = combineReducers({\r\n    todos: todoReducer,\r\n    users: usersReducer,\r\n    posts: postsReducer\r\n});\r\n\r\n\r\n\r\nlet store = createStore(reducers);\r\n\r\nexport default store;","import React from 'react';\r\nimport style from './footer.module.css';\r\n\r\nconst Footer = (props) => {\r\n    return (\r\n        <div className={style.footerWrapper}>\r\n            <div className={style.aboutUsBlock}>\r\n                Lorem Ipsum is simply dummy text of the printing and typesetting industry. \r\n                Lorem Ipsum has been the industry's standard dummy text ever since the 1500s\r\n            </div>\r\n            <div className={style.socialLinks}>\r\n                <a href = \"#\">\r\n                    <img src=\"https://icons.iconarchive.com/icons/froyoshark/enkel/512/Telegram-icon.png\" alt=\"telegramm\" width=\"50px\" />\r\n                </a>\r\n                <a href = \"#\">\r\n                    <img src=\"https://upload.wikimedia.org/wikipedia/commons/5/58/Instagram-Icon.png\" alt=\"instagram\" width=\"50px\"/>\r\n                </a>\r\n                <a href = \"#\">\r\n                    <img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/e/e9/Linkedin_icon.svg/1200px-Linkedin_icon.svg.png\" alt=\"linkedin\" width=\"50px\"/>\r\n                </a>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Footer;","import React, { Suspense, lazy } from 'react';\nimport './App.css';\nimport Header from './components/Header/Header';\nimport {\n  BrowserRouter as Router,\n  Route,\n  Switch,\n  HashRouter,\n} from 'react-router-dom';\nimport TodosContainer from './components/Todos/TodosContainer';\nimport store from './redux/store';\nimport Footer from './components/Footer/Footer';\n//import UsersContainer from './components/Users/UsersContainer';\n//import PostsContainer from './components/Posts/PostsContainer';\n//import Contacts from './components/Contacts/Contacts';\n\n//const TodosContainer = lazy(() => import('./components/Todos/TodosContainer'));\nconst UsersContainer = lazy(() => import('./components/Users/UsersContainer'));\nconst PostsContainer = lazy(() => import('./components/Posts/PostsContainer'));\nconst Contacts = lazy(() => import('./components/Contacts/Contacts'));\n\n\n\nconst App = () => {\n  console.log(process.env.PUBLIC_URL)\n  return (\n     <Router basename={process.env.PUBLIC_UR} >\n      <div className=\"appWrapper\">\n        <Header />\n        <Route exact path=\"/\"\n            render={() => <TodosContainer store = {store} />} />\n          <Suspense fallback={<div>Loading...</div>}>\n                <Route path=\"/users\" \n                      render={() => <UsersContainer store = {store} />} />\n                <Route path=\"/posts\"\n                      render={() => <PostsContainer store = {store} />} />\n                <Route path=\"/contacts\"\n                      render={() => <Contacts />} />\n          </Suspense>\n        <Footer />\n      </div>\n    </Router> \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"todosWrapper\":\"todos_todosWrapper__1SLD_\",\"formWrapper\":\"todos_formWrapper__5iLHX\",\"form\":\"todos_form__1Ekqu\",\"buttonsWrapper\":\"todos_buttonsWrapper__3dXgr\",\"todosItemsWrapper\":\"todos_todosItemsWrapper__2MYaP\",\"todoItem\":\"todos_todoItem__3v0gu\",\"removeButton\":\"todos_removeButton__5Sbak\",\"itemButton\":\"todos_itemButton__Kci1e\",\"taskText\":\"todos_taskText__1UVe7\"};"],"sourceRoot":""}